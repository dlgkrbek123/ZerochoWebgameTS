---------------------------------------------------------------------------

- 자바스크립트는 기본적으로 다 any임
- 변수에 타입을 지정하여 js의 자유로움을 제한한다
- 타입지정에 대문자 ㄴㄴ

---------------------------------------------------------------------------

- primitive type을 타입에 지정가능하다.

let num: number;
num = 3;
let str: string = 'hello';

let arr: number[] = [1, 2, 3];
let arr: Array<number> = [1, 2, 3];
let arr: (string | number | boolean)[] = [true, 2, {}]; // 객체를 넣으려해서 에러

---------------------------------------------------------------------------

// 배열의 개수 및 순서가 결정되어 있다면 튜플을 쓰자
const arr: [boolean, number, string] = [true, 2, '3']

// 값을 수정못하게 읽기전용으로 상수화하며 타입도 값으로 고정
// 상수도 타입으로 간주!!
const arr = [true, 2, '3'] as const;

---------------------------------------------------------------------------

- 객체는 기본적으로 object 타입을 할당가능하나 잘 안쓴다.
=> 모든 객체를 다 할당가능하여 의미가 없음

const obj: object = { a : 'b' }



- 아래와 같이 객체의 스키마를 직접 설정하는게 유효
=> 점점 가독성이 구려지므로 type이나 인터페이스를 활용

const obj: { a: string, b?: number } = {
  a: "3",
  b: 3
}

---------------------------------------------------------------------------

enum Color { Red, Blue, Yellow }
let c: Color = Color.Blue

- enum은 상수 딕셔너리 만드는데 유용

Color[0] === 'Red'
Color['Red'] === 0

---------------------------------------------------------------------------

- void는 undefined와 동일하며 주로 함수에 활용된다.
- return 없는 함수에 주로 활용 (return이 명시적으로 없으면 undefined가 리턴)

function f(a: number, b: number): void {
  console.log(a + b)
}


- 고차함수의 경우 타입 부여시 가독성이 더욱더 안 좋음
- 함수형 프로그래밍할 때 난해

function add(a: number, b: number): (c: string) => number {
  return (c) => {
    return 5;    
  }
}

---------------------------------------------------------------------------

- never
=> 예외 발생 상황에서만 직면
=> 함수가 항상 예외를 throw하거나 리턴값을 절대로 내보내지 않음


- any
=> 모든 값을 할당 가능
=> 외부 라이브러리 타입 에러 발생 시 애용

---------------------------------------------------------------------------

- 타입 캐스팅
- 강제로 타입을 지정

const hello: number = '3'; // 실수로 number로 잘못 선언

(hello as unknwon as string).substr(1, 2);
(<string><unknown>hello).substr(1, 2);

---------------------------------------------------------------------------